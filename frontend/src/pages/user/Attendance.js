import React, { useEffect, useState } from "react";
import api from "../../api";
import SidebarMenu from "../../components/SidebarMenu";

function Attendance() {
  const [records, setRecords] = useState([]);
  const [todayRecord, setTodayRecord] = useState(null);
  const [loading, setLoading] = useState(true);

  const load = async () => {
    try {
      const res = await api.get("/attendance");
      setRecords(res.data);

      const today = new Date().toISOString().split("T")[0];
      const todayRec = res.data.find((r) => r.date === today);
      setTodayRecord(todayRec || null);
    } catch (err) {
      console.error("‚ùå L·ªói load ch·∫•m c√¥ng:", err);
      alert("L·ªói t·∫£i d·ªØ li·ªáu ch·∫•m c√¥ng!");
    } finally {
      setLoading(false);
    }
  };

  const checkIn = async () => {
    try {
      await api.post("/attendance/check-in");
      alert("‚úÖ Check-in th√†nh c√¥ng");
      load();
    } catch (err) {
      alert(err.response?.data?.error || "‚ùå L·ªói check-in");
    }
  };

  const startOvertime = async () => {
    try {
      await api.post("/attendance/overtime");
      alert("‚úÖ B·∫Øt ƒë·∫ßu tƒÉng ca");
      load();
    } catch (err) {
      alert(err.response?.data?.error || "‚ùå L·ªói tƒÉng ca");
    }
  };

  const endOvertime = async () => {
    try {
      await api.post("/attendance/overtime/checkout");
      alert("‚úÖ K·∫øt th√∫c tƒÉng ca");
      load();
    } catch (err) {
      alert(err.response?.data?.error || "‚ùå L·ªói k·∫øt th√∫c tƒÉng ca");
    }
  };

  useEffect(() => {
    load();
  }, []);

  return (
    <div className="container mt-3">
      <div className="row">
        <div className="col-3">
          <SidebarMenu role="employee" />
        </div>
        <div className="col-9">
          <h3>üïí Ch·∫•m c√¥ng</h3>

          {/* Th√¥ng tin h√¥m nay */}
          {todayRecord ? (
            <div className="alert alert-info">
              <strong>üìÖ H√¥m nay:</strong> {todayRecord.date} <br />
              ‚úÖ Check-in:{" "}
              {todayRecord.checkIn ? new Date(todayRecord.checkIn).toLocaleTimeString() : "‚Äî"} <br />
              üïì Check-out:{" "}
              {todayRecord.checkOut ? new Date(todayRecord.checkOut).toLocaleTimeString() : "‚Äî"} <br />
              ‚è≥ ƒêi tr·ªÖ: {todayRecord.lateMinutes || 0} ph√∫t <br />
              ‚è∞ TƒÉng ca: {todayRecord.overtimeHours?.toFixed(2) || 0} gi·ªù <br />
              üìÜ Ng√†y c√¥ng: {todayRecord.totalDays || 0}
            </div>
          ) : (
            <p>üìÖ B·∫°n ch∆∞a ch·∫•m c√¥ng h√¥m nay.</p>
          )}

          {/* N√∫t thao t√°c */}
          <div className="mb-3">
            <button
              className="btn btn-success me-2"
              onClick={checkIn}
              disabled={!!todayRecord?.checkIn}
            >
              ‚úÖ Check-in
            </button>

            <button
              className="btn btn-warning me-2"
              onClick={startOvertime}
              disabled={!todayRecord?.checkIn || todayRecord?.overtimeStart}
            >
              ‚è∞ B·∫Øt ƒë·∫ßu tƒÉng ca
            </button>

            <button
              className="btn btn-danger"
              onClick={endOvertime}
              disabled={!todayRecord?.overtimeStart}
            >
              ‚èπ K·∫øt th√∫c tƒÉng ca
            </button>
          </div>

          {/* B·∫£ng l·ªãch s·ª≠ */}
          {loading ? (
            <p>‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...</p>
          ) : records.length === 0 ? (
            <p>Kh√¥ng c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng.</p>
          ) : (
            <table className="table table-bordered">
              <thead>
                <tr>
                  <th>Ng√†y</th>
                  <th>Gi·ªù v√†o</th>
                  <th>Gi·ªù ra</th>
                  <th>ƒêi tr·ªÖ (ph√∫t)</th>
                  <th>TƒÉng ca (gi·ªù)</th>
                  <th>Ng√†y c√¥ng</th>
                </tr>
              </thead>
              <tbody>
                {records.map((r) => (
                  <tr key={r._id}>
                    <td>{r.date}</td>
                    <td>{r.checkIn ? new Date(r.checkIn).toLocaleTimeString() : "‚Äî"}</td>
                    <td>{r.checkOut ? new Date(r.checkOut).toLocaleTimeString() : "‚Äî"}</td>
                    <td>{r.lateMinutes || 0}</td>
                    <td>{r.overtimeHours?.toFixed(2) || 0}</td>
                    <td>{r.totalDays || 0}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </div>
    </div>
  );
}

export default Attendance;
