import React, { useEffect, useState } from "react";
import api from "../../api";
import SidebarMenu from "../../components/SidebarMenu";

function NotificationsAdmin() {
  const [list, setList] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [departments, setDepartments] = useState(["IT", "HR", "Finance", "Sales"]);
  const [editId, setEditId] = useState(null);
  const [form, setForm] = useState({
    title: "",
    message: "",
    target: "all",   // all | employee | department
    targetValue: "",
  });

  const load = async () => {
    try {
      const res = await api.get("/admin/notifications");
      setList(res.data);

      const empRes = await api.get("/admin/employees");
      setEmployees(empRes.data);
    } catch (err) {
      console.error("‚ùå API Error:", err.response?.data || err.message);
      alert("Kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu");
    }
  };

  useEffect(() => {
    load();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editId) {
        await api.put(`/admin/notifications/${editId}`, form);
        alert("‚úÖ C·∫≠p nh·∫≠t th√¥ng b√°o th√†nh c√¥ng");
      } else {
        await api.post("/admin/notifications", form);
        alert("‚úÖ G·ª≠i th√¥ng b√°o th√†nh c√¥ng");
      }
      setForm({ title: "", message: "", target: "all", targetValue: "" });
      setEditId(null);
      load();
    } catch (err) {
      console.error("‚ùå L·ªói l∆∞u:", err.response?.data || err.message);
      alert("‚ùå Kh√¥ng th·ªÉ l∆∞u th√¥ng b√°o");
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a?")) return;
    try {
      await api.delete(`/admin/notifications/${id}`);
      alert("üóëÔ∏è ƒê√£ x√≥a th√¥ng b√°o");
      load();
    } catch (err) {
      console.error("‚ùå L·ªói x√≥a:", err.response?.data || err.message);
      alert("‚ùå Kh√¥ng th·ªÉ x√≥a th√¥ng b√°o");
    }
  };

  const startEdit = (n) => {
    setEditId(n._id);
    setForm({
      title: n.title,
      message: n.message,
      target: n.target,
      targetValue: n.targetValue || "",
    });
  };

  return (
    <div className="container mt-3">
      <div className="row">
        <div className="col-3">
          <SidebarMenu role="admin" />
        </div>
        <div className="col-9">
          <h3>üîî Qu·∫£n l√Ω th√¥ng b√°o</h3>

          {/* Form */}
          <form onSubmit={handleSubmit} className="mb-3">
            <div className="mb-2">
              <label className="form-label">Ti√™u ƒë·ªÅ</label>
              <input
                type="text"
                className="form-control"
                value={form.title}
                onChange={(e) => setForm({ ...form, title: e.target.value })}
                required
              />
            </div>

            <div className="mb-2">
              <label className="form-label">N·ªôi dung</label>
              <textarea
                className="form-control"
                value={form.message}
                onChange={(e) => setForm({ ...form, message: e.target.value })}
                required
              />
            </div>

            <div className="mb-2">
              <label className="form-label">G·ª≠i ƒë·∫øn</label>
              <select
                className="form-control"
                value={form.target}
                onChange={(e) => setForm({ ...form, target: e.target.value, targetValue: "" })}
              >
                <option value="all">T·∫•t c·∫£ nh√¢n vi√™n</option>
                <option value="employee">M·ªôt nh√¢n vi√™n</option>
                <option value="department">M·ªôt ph√≤ng ban</option>
              </select>
            </div>

            {form.target === "employee" && (
              <div className="mb-2">
                <label className="form-label">Ch·ªçn nh√¢n vi√™n</label>
                <select
                  className="form-control"
                  value={form.targetValue}
                  onChange={(e) => setForm({ ...form, targetValue: e.target.value })}
                  required
                >
                  <option value="">-- Ch·ªçn nh√¢n vi√™n --</option>
                  {employees.map((emp) => (
                    <option key={emp._id} value={emp.userId?._id}>
                      {emp.name} ({emp.userId?.username})
                    </option>
                  ))}
                </select>
              </div>
            )}

            {form.target === "department" && (
              <div className="mb-2">
                <label className="form-label">Ch·ªçn ph√≤ng ban</label>
                <select
                  className="form-control"
                  value={form.targetValue}
                  onChange={(e) => setForm({ ...form, targetValue: e.target.value })}
                  required
                >
                  <option value="">-- Ch·ªçn ph√≤ng ban --</option>
                  {departments.map((d) => (
                    <option key={d} value={d}>
                      {d}
                    </option>
                  ))}
                </select>
              </div>
            )}

            <button className="btn btn-primary mt-2">
              {editId ? "üíæ L∆∞u thay ƒë·ªïi" : "‚ûï G·ª≠i th√¥ng b√°o"}
            </button>
            {editId && (
              <button
                type="button"
                className="btn btn-secondary mt-2 ms-2"
                onClick={() => {
                  setEditId(null);
                  setForm({ title: "", message: "", target: "all", targetValue: "" });
                }}
              >
                H·ªßy
              </button>
            )}
          </form>

          {/* Danh s√°ch */}
          <table className="table table-bordered">
            <thead>
              <tr>
                <th>Ti√™u ƒë·ªÅ</th>
                <th>N·ªôi dung</th>
                <th>ƒê·ªëi t∆∞·ª£ng</th>
                <th>Ng√†y g·ª≠i</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {list.map((n) => (
                <tr key={n._id}>
                  <td>{n.title}</td>
                  <td>{n.message}</td>
                  <td>
                    {n.target === "all"
                      ? "T·∫•t c·∫£"
                      : n.target === "employee"
                      ? `Nh√¢n vi√™n: ${n.targetValue}`
                      : `Ph√≤ng ban: ${n.targetValue}`}
                  </td>
                  <td>{new Date(n.createdAt).toLocaleString("vi-VN")}</td>
                  <td>
                    <button className="btn btn-warning btn-sm me-2" onClick={() => startEdit(n)}>
                      S·ª≠a
                    </button>
                    <button className="btn btn-danger btn-sm" onClick={() => handleDelete(n._id)}>
                      X√≥a
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default NotificationsAdmin;
