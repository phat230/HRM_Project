import React, { useEffect, useState } from "react";
import api from "../../api";
import SidebarMenu from "../../components/SidebarMenu";

function PerformanceReviewAdmin() {
  const [reviews, setReviews] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [editId, setEditId] = useState(null);

  const [form, setForm] = useState({
    userId: "",
    tasksCompleted: 0,
    communication: 0,
    technical: 0,
    attitude: 10,
    feedback: "",
  });

  // Load d·ªØ li·ªáu
  const load = async () => {
    try {
      const res = await api.get("/admin/performance");
      setReviews(res.data);
      const empRes = await api.get("/admin/employees");
      setEmployees(empRes.data);
    } catch (err) {
      console.error("‚ùå API Error:", err.response?.data || err.message);
    }
  };

  useEffect(() => {
    load();
  }, []);

  // Th√™m ho·∫∑c c·∫≠p nh·∫≠t
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editId) {
        await api.put(`/admin/performance/${editId}`, form);
        alert("‚úÖ C·∫≠p nh·∫≠t ƒë√°nh gi√° th√†nh c√¥ng");
      } else {
        await api.post("/admin/performance", form);
        alert("‚úÖ ƒê√£ th√™m ƒë√°nh gi√°");
      }

      setForm({
        userId: "",
        tasksCompleted: 0,
        communication: 0,
        technical: 0,
        attitude: 10,
        feedback: "",
      });
      setEditId(null);
      load();
    } catch (err) {
      console.error("‚ùå L·ªói th√™m/c·∫≠p nh·∫≠t:", err.response?.data || err.message);
      alert("‚ùå Kh√¥ng th·ªÉ l∆∞u ƒë√°nh gi√°");
    }
  };

  // X√≥a
  const handleDelete = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë√°nh gi√° n√†y?")) return;
    try {
      await api.delete(`/admin/performance/${id}`);
      alert("üóëÔ∏è ƒê√£ x√≥a ƒë√°nh gi√°");
      load();
    } catch (err) {
      console.error("‚ùå L·ªói x√≥a:", err.response?.data || err.message);
      alert("‚ùå Kh√¥ng th·ªÉ x√≥a ƒë√°nh gi√°");
    }
  };

  // S·ª≠a
  const startEdit = (review) => {
    setEditId(review._id);
    setForm({
      userId: review.userId?._id || "",
      tasksCompleted: review.tasksCompleted || 0,
      communication: review.communication || 0,
      technical: review.technical || 0,
      attitude: review.attitude || 10,
      feedback: review.feedback || "",
    });
  };

  return (
    <div className="container mt-3">
      <div className="row">
        <div className="col-3">
          <SidebarMenu role="admin" />
        </div>
        <div className="col-9">
          <h3>üìä ƒê√°nh gi√° hi·ªáu su·∫•t</h3>

          {/* Form */}
          <form className="card p-3 mb-3" onSubmit={handleSubmit}>
            {/* Nh√¢n vi√™n */}
            <label className="form-label">Nh√¢n vi√™n</label>
            <select
              className="form-control mb-2"
              value={form.userId}
              onChange={(e) => setForm({ ...form, userId: e.target.value })}
              required
            >
              <option value="">-- Ch·ªçn nh√¢n vi√™n --</option>
              {employees.map((emp) => (
                <option key={emp._id} value={emp.userId?._id}>
                  {emp.name} ({emp.userId?.username})
                </option>
              ))}
            </select>

            {/* Ho√†n th√†nh nhi·ªám v·ª• */}
            <label className="form-label">Ho√†n th√†nh nhi·ªám v·ª• (s·ªë l∆∞·ª£ng)</label>
            <input
              type="number"
              className="form-control mb-2"
              value={form.tasksCompleted}
              onChange={(e) =>
                setForm({ ...form, tasksCompleted: Number(e.target.value) })
              }
              min="0"
              required
            />

            {/* Giao ti·∫øp */}
            <label className="form-label">K·ªπ nƒÉng giao ti·∫øp</label>
            <select
              className="form-control mb-2"
              value={form.communication}
              onChange={(e) =>
                setForm({ ...form, communication: Number(e.target.value) })
              }
            >
              <option value="0">Kh√¥ng bi·∫øt (0)</option>
              <option value="2">K√©m (2)</option>
              <option value="4">C√≥ th·ªÉ giao ti·∫øp (4)</option>
              <option value="6">Kh√° (6)</option>
              <option value="8">T·ªët (8)</option>
              <option value="10">Gi·ªèi (10)</option>
            </select>

            {/* K·ªπ thu·∫≠t */}
            <label className="form-label">K·ªπ nƒÉng k·ªπ thu·∫≠t</label>
            <select
              className="form-control mb-2"
              value={form.technical}
              onChange={(e) =>
                setForm({ ...form, technical: Number(e.target.value) })
              }
            >
              <option value="0">Kh√¥ng bi·∫øt (0)</option>
              <option value="2">K√©m (2)</option>
              <option value="4">C∆° b·∫£n (4)</option>
              <option value="6">Kh√° (6)</option>
              <option value="8">T·ªët (8)</option>
              <option value="10">Gi·ªèi (10)</option>
            </select>

            {/* Th√°i ƒë·ªô */}
            <label className="form-label">Th√°i ƒë·ªô / tinh th·∫ßn</label>
            <select
              className="form-control mb-2"
              value={form.attitude}
              onChange={(e) =>
                setForm({ ...form, attitude: Number(e.target.value) })
              }
            >
              <option value="0">Ti√™u c·ª±c (0)</option>
              <option value="10">T√≠ch c·ª±c (10)</option>
            </select>

            {/* Nh·∫≠n x√©t */}
            <label className="form-label">Nh·∫≠n x√©t</label>
            <textarea
              className="form-control mb-2"
              value={form.feedback}
              onChange={(e) => setForm({ ...form, feedback: e.target.value })}
            />

            <button className="btn btn-primary">
              {editId ? "üíæ L∆∞u thay ƒë·ªïi" : "‚ûï Th√™m ƒë√°nh gi√°"}
            </button>
            {editId && (
              <button
                type="button"
                className="btn btn-secondary ms-2"
                onClick={() => {
                  setEditId(null);
                  setForm({
                    userId: "",
                    tasksCompleted: 0,
                    communication: 0,
                    technical: 0,
                    attitude: 10,
                    feedback: "",
                  });
                }}
              >
                H·ªßy
              </button>
            )}
          </form>

          {/* B·∫£ng danh s√°ch */}
          <table className="table table-bordered">
            <thead>
              <tr>
                <th>Nh√¢n vi√™n</th>
                <th>Nhi·ªám v·ª• ho√†n th√†nh</th>
                <th>Giao ti·∫øp</th>
                <th>K·ªπ thu·∫≠t</th>
                <th>Th√°i ƒë·ªô</th>
                <th>Nh·∫≠n x√©t</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {reviews.map((r) => (
                <tr key={r._id}>
                  <td>{r.userId?.username}</td>
                  <td>{r.tasksCompleted}</td>
                  <td>{r.communication}</td>
                  <td>{r.technical}</td>
                  <td>{r.attitude}</td>
                  <td>{r.feedback}</td>
                  <td>
                    <button
                      className="btn btn-warning btn-sm me-2"
                      onClick={() => startEdit(r)}
                    >
                      S·ª≠a
                    </button>
                    <button
                      className="btn btn-danger btn-sm"
                      onClick={() => handleDelete(r._id)}
                    >
                      X√≥a
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default PerformanceReviewAdmin;
