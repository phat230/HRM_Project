// backend/routes/employeeRoutes.js
const express = require("express");
const path = require("path");
const fs = require("fs");
const bcrypt = require("bcryptjs");
const multer = require("multer");
const router = express.Router();

const auth = require("../middleware/authMiddleware");

// Models
const User = require("../models/User");
const Employee = require("../models/Employee");
const Document = require("../models/Document");
const WorkSchedule = require("../models/WorkSchedule");
const Notification = require("../models/Notification");
const PerformanceReview = require("../models/PerformanceReview");
const Attendance = require("../models/Attendance");

/* ========================= H·ªí S∆† C√Å NH√ÇN ========================= */

// L·∫•y h·ªì s∆° c·ªßa ch√≠nh m√¨nh
router.get("/me", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const emp = await Employee.findOne({ userId: req.user.id }).populate("userId", "username role");
    if (!emp) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y h·ªì s∆°" });
    res.json(emp);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// C·∫≠p nh·∫≠t h·ªì s∆° c·ªßa ch√≠nh m√¨nh
router.put("/profile", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const emp = await Employee.findOne({ userId: req.user.id });
    if (!emp) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y h·ªì s∆°" });

    const name = typeof req.body.name === "string" ? req.body.name.trim() : "";
    if (!name) return res.status(400).json({ error: "T√™n hi·ªÉn th·ªã kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });

    emp.name = name;
    await emp.save();
    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng", employee: emp });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ƒê·ªïi m·∫≠t kh·∫©u
router.put("/change-password", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body || {};
    if (!oldPassword || !newPassword) {
      return res.status(400).json({ error: "Thi·∫øu m·∫≠t kh·∫©u c≈© ho·∫∑c m·∫≠t kh·∫©u m·ªõi" });
    }
    if (String(newPassword).length < 6) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u m·ªõi ph·∫£i t·ª´ 6 k√Ω t·ª±" });
    }

    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n" });

    const ok = await bcrypt.compare(oldPassword, user.password);
    if (!ok) return res.status(400).json({ error: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng" });

    user.password = await bcrypt.hash(newPassword, 10);
    await user.save();

    res.json({ message: "‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå change-password error:", err);
    res.status(500).json({ error: err.message });
  }
});

/* ========================= üìÇ T√ÄI LI·ªÜU PH√íNG BAN ========================= */

// üß≠ C·∫•u h√¨nh upload
const storage = multer.diskStorage({
  destination: async (req, file, cb) => {
    try {
      const emp = await Employee.findOne({ userId: req.user.id });
      if (!emp) return cb(new Error("Kh√¥ng t√¨m th·∫•y ph√≤ng ban nh√¢n vi√™n"), null);

      const department = emp.department || "general";
      const folderName = req.body.folder || "Chung";
      const dir = path.join("uploads", "documents", department, folderName);

      fs.mkdirSync(dir, { recursive: true });
      cb(null, dir);
    } catch (err) {
      cb(err, null);
    }
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + "-" + file.originalname);
  },
});
const upload = multer({ storage });

// üì§ Upload file
router.post(
  "/documents",
  auth(["employee", "manager", "admin"]),
  upload.single("file"),
  async (req, res) => {
    try {
      const emp = await Employee.findOne({ userId: req.user.id });
      if (!emp) return res.status(403).json({ error: "Kh√¥ng t√¨m th·∫•y ph√≤ng ban nh√¢n vi√™n" });

      const doc = new Document({
        title: req.file.originalname,
        department: emp.department || "general",
        folder: req.body.folder || "Chung",
        filePath: req.file.path,
        fileType: req.file.mimetype,
        uploadedBy: req.user.id,
        isFolder: false,
      });

      await doc.save();
      res.json({ message: "‚úÖ Upload th√†nh c√¥ng", doc });
    } catch (err) {
      console.error("‚ùå L·ªói upload file:", err);
      res.status(500).json({ error: err.message });
    }
  }
);

// üì¶ Li·ªát k√™ t√†i li·ªáu
router.get("/documents", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    let filter = {};
    if (req.user.role !== "admin") {
      const emp = await Employee.findOne({ userId: req.user.id });
      const dept = emp?.department || "general";
      filter = { department: { $in: [dept, "general"] } };
    }

    const docs = await Document.find(filter)
      .populate("uploadedBy", "_id username role")
      .sort({ uploadedAt: -1 });

    res.json(docs);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y t√†i li·ªáu:", err);
    res.status(500).json({ error: err.message });
  }
});

// ‚¨áÔ∏è T·∫£i t√†i li·ªáu
router.get("/documents/download/:id", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const doc = await Document.findById(req.params.id);
    if (!doc) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu" });

    if (req.user.role !== "admin") {
      const emp = await Employee.findOne({ userId: req.user.id });
      const dept = emp?.department || "__none__";
      if (!(doc.department === "general" || doc.department === dept)) {
        return res.status(403).json({ error: "üö´ Kh√¥ng c√≥ quy·ªÅn t·∫£i t√†i li·ªáu n√†y" });
      }
    }

    const filePath = path.resolve(doc.filePath);
    if (!fs.existsSync(filePath)) return res.status(404).json({ error: "File kh√¥ng t·ªìn t·∫°i" });

    res.setHeader("Content-Disposition", `attachment; filename="${encodeURIComponent(doc.title)}"`);
    res.setHeader("Content-Type", doc.fileType || "application/octet-stream");
    res.download(filePath);
  } catch (err) {
    console.error("‚ùå L·ªói t·∫£i file:", err);
    res.status(500).json({ error: err.message });
  }
});

// üóëÔ∏è X√≥a t√†i li·ªáu (ng∆∞·ªùi upload, admin ho·∫∑c nh√¢n vi√™n c√πng ph√≤ng ban - tr·ª´ th∆∞ m·ª•c "general")
router.delete("/documents/:id", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const doc = await Document.findById(req.params.id);
    if (!doc) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu" });

    // ‚úÖ Admin c√≥ to√†n quy·ªÅn x√≥a
    if (req.user.role === "admin") {
      const filePath = path.resolve(doc.filePath);
      if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
      await doc.deleteOne();
      return res.json({ message: "üóëÔ∏è X√≥a t√†i li·ªáu th√†nh c√¥ng (admin)" });
    }

    // ‚úÖ Ki·ªÉm tra quy·ªÅn nh√¢n vi√™n
    const emp = await Employee.findOne({ userId: req.user.id });
    if (!emp) return res.status(403).json({ error: "Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n" });

    const isOwner = doc.uploadedBy.toString() === req.user.id;
    const sameDept = emp.department === doc.department;
    const notGeneral = doc.department !== "general";

    if (!isOwner && !(sameDept && notGeneral)) {
      return res.status(403).json({ error: "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a t√†i li·ªáu n√†y" });
    }

    // ‚úÖ Th·ª±c hi·ªán x√≥a file
    const filePath = path.resolve(doc.filePath);
    if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
    await doc.deleteOne();

    res.json({ message: "üóëÔ∏è X√≥a t√†i li·ªáu th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a t√†i li·ªáu:", err);
    res.status(500).json({ error: err.message });
  }
});

// ========================= üìä HI·ªÜU SU·∫§T NH√ÇN VI√äN =========================
router.get("/performance", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const list = await PerformanceReview.find({ userId: req.user.id }).sort({ createdAt: -1 });
    res.json(list);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y hi·ªáu su·∫•t:", err);
    res.status(500).json({ error: err.message });
  }
});

// ========================= üë• L·∫§Y DANH S√ÅCH ƒê·ªíNG NGHI·ªÜP CHO CHAT =========================
router.get("/peers", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const { scope } = req.query; // scope = 'dept' ho·∫∑c 'all'
    const meId = req.user.id;

    // L·∫•y th√¥ng tin nh√¢n vi√™n hi·ªán t·∫°i ƒë·ªÉ bi·∫øt ph√≤ng ban
    const meEmp = await Employee.findOne({ userId: meId });
    if (!meEmp) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y h·ªì s∆° nh√¢n vi√™n hi·ªán t·∫°i" });

    const query = {};
    if (scope !== "all") {
      // N·∫øu kh√¥ng ph·∫£i "all" th√¨ ch·ªâ l·∫•y trong ph√≤ng ban
      query.department = meEmp.department;
    }

    // L·∫•y danh s√°ch nh√¢n vi√™n
    const employees = await Employee.find(query)
      .populate("userId", "username role")
      .sort({ name: 1 });

    // Lo·∫°i b·ªè ch√≠nh m√¨nh v√† ƒë·ªãnh d·∫°ng d·ªØ li·ªáu tr·∫£ v·ªÅ
    const result = employees
      .filter((e) => e.userId && e.userId._id.toString() !== meId)
      .map((e) => ({
        _id: e._id,
        userId: e.userId._id,
        username: e.userId.username,
        name: e.name,
        department: e.department,
      }));

    res.json(result);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch peers:", err);
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
