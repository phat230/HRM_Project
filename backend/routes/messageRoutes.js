const express = require("express");
const router = express.Router();
const auth = require("../middleware/authMiddleware");
const ChatRoom = require("../models/ChatRoom");
const Message = require("../models/Message");
const Employee = require("../models/Employee");

/**
 * üìú L·∫•y danh s√°ch ph√≤ng chat
 */
router.get("/rooms", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const myId = req.user.id;
    const emp = await Employee.findOne({ userId: myId });
    const dept = emp?.department || "Ch∆∞a ph√¢n ph√≤ng";

    // Danh s√°ch ph√≤ng private
    const privateRooms = await ChatRoom.find({
      type: "private",
      participants: myId,
    })
      .populate("participants", "username")
      .sort({ updatedAt: -1 });

    // T·∫°o ho·∫∑c l·∫•y ph√≤ng ban
    let deptRoom = await ChatRoom.findOne({ type: "group", department: dept });
    if (!deptRoom) {
      deptRoom = await new ChatRoom({
        type: "group",
        name: `Ph√≤ng ${dept}`,
        department: dept,
        participants: [myId],
      }).save();
    }

    res.json({ privateRooms, deptRoom });
  } catch (err) {
    console.error("‚ùå L·ªói load rooms:", err);
    res.status(500).json({ error: err.message });
  }
});

/**
 * üî∏ T·∫°o ho·∫∑c m·ªü ph√≤ng private gi·ªØa 2 user
 */
router.post("/rooms/private", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const { otherUserId } = req.body;
    const myId = req.user.id;

    let room = await ChatRoom.findOne({
      type: "private",
      participants: { $all: [myId, otherUserId] },
    }).populate("participants", "username");

    if (!room) {
      room = await new ChatRoom({
        type: "private",
        participants: [myId, otherUserId],
      }).save();
      await room.populate("participants", "username");
    }

    res.json(room);
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o ph√≤ng:", err);
    res.status(500).json({ error: err.message });
  }
});

/**
 * üí¨ L·∫•y l·ªãch s·ª≠ tin nh·∫Øn theo roomId
 */
router.get("/:roomId", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const { roomId } = req.params;
    const messages = await Message.find({ roomId })
      .populate("sender", "username")
      .sort({ createdAt: 1 });

    res.json(messages);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y tin nh·∫Øn:", err);
    res.status(500).json({ error: err.message });
  }
});

/**
 * ‚úâÔ∏è G·ª≠i tin nh·∫Øn (l∆∞u lu√¥n DB)
 */
router.post("/", auth(["employee", "manager", "admin"]), async (req, res) => {
  try {
    const { roomId, content } = req.body;
    if (!roomId || !content) return res.status(400).json({ error: "Thi·∫øu d·ªØ li·ªáu" });

    const room = await ChatRoom.findById(roomId);
    if (!room) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ph√≤ng chat" });

    const msg = new Message({
      roomId,
      sender: req.user.id,
      content,
    });
    await msg.save();

    // C·∫≠p nh·∫≠t th·ªùi gian ho·∫°t ƒë·ªông c·ªßa ph√≤ng
    room.updatedAt = new Date();
    await room.save();

    const populatedMsg = await msg.populate("sender", "username");

    res.json(populatedMsg);
  } catch (err) {
    console.error("‚ùå L·ªói g·ª≠i tin nh·∫Øn:", err);
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
